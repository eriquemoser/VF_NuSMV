MODULE main 
VAR 
	cabin : 0 .. 3; 
	dir :  {up,down};
	request: array 0 .. 3 of boolean;
	
ASSIGN
	next(cabin):=	case
						dir=up & cabin < 3 : cabin + 1; 	--moves up
						dir=down & cabin > 0 : cabin - 1; 	--moves down
						TRUE : cabin;							--stuck
					esac;

							--sempre que chega em uma das extremidades, muda direção
	next(dir) := 	case							
						dir=up & next(cabin) = 3 : down; 	--switch dir
						dir=down & next(cabin) = 0 : up; 	-- switch dir
						TRUE: dir;								--keep on
					esac;
							--aqui a lógica está em imaginar que o request só vai mudar seu comportamento para..
							--requisição verdadeiramente feita, se um request for feito, ou então...
							--a partir do momento que ele chega próximo do andar, a requisição é desfeita.
	next(request[0]) :=	case
							next(cabin) = 0 : FALSE;	--disappears
							request[0] : TRUE;			--remains
							TRUE : {FALSE,TRUE};
						esac;
	next(request[1]) :=	case
							next(cabin) = 1 : FALSE;	--disappears
							request[1] : TRUE;			--remains
							TRUE : {FALSE,TRUE};
						esac;
	next(request[2]) :=	case
							next(cabin) = 2 : FALSE;	--disappears
							request[2] : TRUE;			--remains
							TRUE : {FALSE,TRUE};
						esac;
	next(request[3]) :=	case
							next(cabin) = 3 : FALSE;	--disappears
							request[3] : TRUE;			--remains
							TRUE : {FALSE,TRUE};
						esac;
	
	init(cabin) 		:= 0;
	init(dir) 			:= up;
	init(request[0])	:= FALSE;
	init(request[1])	:= FALSE;
	init(request[2])	:= FALSE;
	init(request[3])	:= FALSE;

SPEC
	AG EX TRUE
SPEC
	AG (AF!request[0] & AF!request[1] & AF!request[2] & AF!request[3])
SPEC	
	AG AF (!request[0] & !request[1] & !request[2] & !request[3])
